{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["OFFSET","Math","random","map","value","in_min","in_max","out_min","out_max","console","log","PressButton","setPower","useState","pressed","toggle","width","setWidth","useSpring","backgroundColor","props","set","useEffect","from","to","immediate","config","duration","parseInt","className","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","div","style","background","interpolate","x","App","r","power","acc","setAcc","mass","tension","friction","precision","transform","xmlns","viewBox","height","fill","stroke","strokeWidth","cx","cy","g","transformOrigin","numOfItems","items","i","xLength","cos","PI","yLength","sin","txLength","tyLength","push","key","x1","y1","x2","y2","y","fontSize","rederItems","points","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ff69c5e3.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport { animated, useSpring } from 'react-spring'\nimport './App.css';\n\nconst OFFSET = Math.random()\n\nconst map = function (value, in_min, in_max, out_min, out_max) {\n  console.log(value)\n  console.log((value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min)\n  if (value === 0) {\n    console.log('00000')\n    return out_min\n  }\n  return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n\nfunction App() {\n  const r = 200\n  const cx = 250\n  const cy = 250\n  const [power, setPower] = useState(0)\n  const [acc, setAcc] = useState(0)\n  const config = { mass: 50, tension: 200, friction: 200, precision: 0.001 }\n  const [props, set] = useSpring(() => ({ transform: 'rotate(0deg)', immediate: false }))\n\n  useEffect(() => {\n    set({\n      from: { transform: `rotate(${map(acc, 0, 100, 0, 700)}deg)` },\n      transform: `rotate(${map(acc + power, 0, 100, 0, 700)}deg)`, immediate: false, config\n    })\n    setAcc(acc + power)\n  }, [power])\n\n  const rederItems = (numOfItems) => {\n    let items = []\n    for (let i = 0; i < numOfItems; i++) {\n      let xLength = Math.cos(2 * Math.PI * (i / numOfItems + OFFSET)) * (r - 5)\n      let yLength = Math.sin(2 * Math.PI * (i / numOfItems + OFFSET)) * (r - 5)\n      let txLength = Math.cos(2 * Math.PI * ((i + 0.5) / numOfItems + OFFSET)) * (r / 2)\n      let tyLength = Math.sin(2 * Math.PI * ((i + 0.5) / numOfItems + OFFSET)) * (r / 2)\n      items.push(<Fragment key={i}>\n        <line\n          stroke='rgb(255,0,0)'\n          strokeWidth='2'\n          x1={cx + xLength}\n          y1={cy + yLength}\n          x2={cx}\n          y2={cy}\n        />\n        <text\n          x={cx + txLength}\n          y={cy + tyLength}\n          fontSize=\"15px\"\n          transform={`rotate(${((i + 0.5) / numOfItems + OFFSET) * 360} \n                  ${cx + txLength},\n                  ${cy + tyLength})`}\n        >{i}</text>\n      </Fragment>)\n    }\n    return items\n  }\n\n  return (\n    <div>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 500 500\"\n        style={{ width: \"100vw\", height: \"80vh\" }}>\n        <g fill=\"white\" stroke=\"green\" strokeWidth=\"10\">\n          <circle cx=\"250\" cy=\"250\" r={r} />\n        </g>\n        <animated.g style={{\n          transform: props.transform,\n          transformOrigin: \"center\"\n        }} >\n          {rederItems(12)}\n\n        </animated.g>\n        <g fill=\"#61DAFB\">\n          <circle cx=\"250\" cy=\"250\" r=\"15\" />\n        </g>\n        <g fill=\"black\">\n          <circle cx=\"250\" cy=\"250\" r=\"5\" />\n        </g>\n        <g fill=\"lime\" stroke=\"purple\" strokeWidth=\"2\">\n          <polygon points=\"250,70 230,30 270,30\" />\n        </g>\n      </svg>\n      <PressButton setPower={setPower} style={{ height: \"20vh\" }}/>\n    </div>\n  );\n}\n\nconst PressButton = ({ setPower }) => {\n  const [pressed, toggle] = useState(false)\n  const [width, setWidth] = useState(0)\n  const [props, set] = useSpring(() => ({ width: '0%', backgroundColor: 'hotpink' }))\n  useEffect(() => {\n    if (pressed)\n      set({\n        from: { width: '0%', backgroundColor: 'hotpink' },\n        to: { width: '100%', backgroundColor: \"red\" }, immediate: false, config: { duration: 2000 }\n      })\n    else {\n      setPower(parseInt(width))\n      set({ to: { width: '0%', backgroundColor: 'hotpink' }, immediate: true })\n    }\n  }, [pressed])\n\n  return <button className=\"main\"\n    onMouseDown={() => { toggle(!pressed); }}\n    onMouseUp={() => { toggle(!pressed); }}\n    onTouchStart={() => { toggle(!pressed); }}\n    onTouchEnd={() => { toggle(!pressed); }}\n  >\n    <animated.div className=\"fill\" style={{\n      width: props.width,\n      background: props.backgroundColor\n    }} />\n    <animated.div className=\"content\">{props.width.interpolate(x => {\n      setWidth(parseInt(x))\n      return x === '0%' ? \"Press me!\" : parseInt(x) + '%'\n    })}</animated.div>\n  </button>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}